import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.Test;

public class gridProductFinderTest {

    @Test
    public void testTrivial() {
        gridProductFinder g = new gridProductFinder(2,2,2);
        Double[] row1 = new Double[2];
        row1[0] = 2.0;
        row1[1] = 7.0;
        Double[] row2 = new Double[2];
        row2[0] = 3.0;
        row2[1] = 9.0;
        g.addRow(row1);
        g.addRow(row2);
        g.findGreatestMultiple();
        ArrayList<Double> mx = g.getMaxSet();
        for (int i = 0; i < mx.size(); i++) {
            System.out.println(mx.get(i));   
        }
        System.out.println(g.getDir());
    }
    
    @Test
    public void testQuestion() {
        gridProductFinder g = new gridProductFinder(20,20,4);
        Double[] row1 = {08.0,02.0,22.0,97.0,38.0,15.0,00.0,40.0,00.0,75.0,04.0,05.0,07.0,78.0,52.0,12.0,50.0,77.0,91.0,08.0};
        g.addRow(row1);
        
        Double[] row2 = {49.0,49.0,99.0,40.0,17.0,81.0,18.0,57.0,60.0,87.0,17.0,40.0,98.0,43.0,69.0,48.0,04.0,56.0,62.0,00.0};
        g.addRow(row2);
        
        Double[] row3 = {81.0,49.0,31.0,73.0,55.0,79.0,14.0,29.0,93.0,71.0,40.0,67.0,53.0,88.0,30.0,03.0,49.0,13.0,36.0,65.0};
        g.addRow(row3);
        
        Double[] row4 = {52.0,70.0,95.0,23.0,04.0,60.0,11.0,42.0,69.0,24.0,68.0,56.0,01.0,32.0,56.0,71.0,37.0,02.0,36.0,91.0};
        g.addRow(row4);
        
        Double[] row5 = {22.0,31.0,16.0,71.0,51.0,67.0,63.0,89.0,41.0,92.0,36.0,54.0,22.0,40.0,40.0,28.0,66.0,33.0,13.0,80.0};
        g.addRow(row5);
        
        Double[] row6 = {24.0,47.0,32.0,60.0,99.0,03.0,45.0,02.0,44.0,75.0,33.0,53.0,78.0,36.0,84.0,20.0,35.0,17.0,12.0,50.0};
        g.addRow(row6);
        
        Double[] row7 = {32.0,98.0,81.0,28.0,64.0,23.0,67.0,10.0,26.0,38.0,40.0,67.0,59.0,54.0,70.0,66.0,18.0,38.0,64.0,70.0};
        g.addRow(row7);
        
        Double[] row8 = {67.0,26.0,20.0,68.0,02.0,62.0,12.0,20.0,95.0,63.0,94.0,39.0,63.0,08.0,40.0,91.0,66.0,49.0,94.0,21.0};
        g.addRow(row8);
        
        Double[] row9 = {24.0,55.0,58.0,05.0,66.0,73.0,99.0,26.0,97.0,17.0,78.0,78.0,96.0,83.0,14.0,88.0,34.0,89.0,63.0,72.0};
        g.addRow(row9);
        
        Double[] row10 = {21.0,36.0,23.0,09.0,75.0,00.0,76.0,44.0,20.0,45.0,35.0,14.0,00.0,61.0,33.0,97.0,34.0,31.0,33.0,95.0};
        g.addRow(row10);
        
        Double[] row11 = {78.0,17.0,53.0,28.0,22.0,75.0,31.0,67.0,15.0,94.0,03.0,80.0,04.0,62.0,16.0,14.0,09.0,53.0,56.0,92.0};
        g.addRow(row11);
        //
        Double[] row12 = {16.0,39.0,05.0,42.0,96.0,35.0,31.0,47.0,55.0,58.0,88.0,24.0,00.0,17.0,54.0,24.0,36.0,29.0,85.0,57.0};
        g.addRow(row12);
        
        Double[] row13 = {86.0,56.0,00.0,48.0,35.0,71.0,89.0,07.0,05.0,44.0,44.0,37.0,44.0,60.0,21.0,58.0,51.0,54.0,17.0,58.0};
        g.addRow(row13);
        
        Double[] row14 = {19.0,80.0,81.0,68.0,05.0,94.0,47.0,69.0,28.0,73.0,92.0,13.0,86.0,52.0,17.0,77.0,04.0,89.0,55.0,40.0};
        g.addRow(row14);
        
        Double[] row15 = {04.0,52.0,08.0,83.0,97.0,35.0,99.0,16.0,07.0,97.0,57.0,32.0,16.0,26.0,26.0,79.0,33.0,27.0,98.0,66.0};
        g.addRow(row15);
        
        Double[] row16 = {88.0,36.0,68.0,87.0,57.0,62.0,20.0,72.0,03.0,46.0,33.0,67.0,46.0,55.0,12.0,32.0,63.0,93.0,53.0,69.0};
        g.addRow(row16);
        
        Double[] row17 = {04.0,42.0,16.0,73.0,38.0,25.0,39.0,11.0,24.0,94.0,72.0,18.0,08.0,46.0,29.0,32.0,40.0,62.0,76.0,36.0};
        g.addRow(row17);
        
        Double[] row18 = {20.0,69.0,36.0,41.0,72.0,30.0,23.0,88.0,34.0,62.0,99.0,69.0,82.0,67.0,59.0,85.0,74.0,04.0,36.0,16.0};
        g.addRow(row18);
        
        Double[] row19 = {20.0,73.0,35.0,29.0,78.0,31.0,90.0,01.0,74.0,31.0,49.0,71.0,48.0,86.0,81.0,16.0,23.0,57.0,05.0,54.0};
        g.addRow(row19);
        //
        Double[] row20 = {01.0,70.0,54.0,71.0,83.0,51.0,54.0,69.0,16.0,92.0,33.0,48.0,61.0,43.0,52.0,01.0,89.0,19.0,67.0,48.0};
        g.addRow(row20);
        
        g.findGreatestMultiple();
        ArrayList<Double> mx = g.getMaxSet();
        for (int i = 0; i < mx.size(); i++) {
            System.out.println(mx.get(i));   
        }
        System.out.println(g.getDir());
    }

}
